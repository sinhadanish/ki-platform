openapi: 3.0.0
info:
  title: Ki Chat API
  description: Real-time conversation and messaging API for Ki relationship intelligence platform
  version: 1.0.0
  contact:
    name: Ki Platform Team
    email: api@ki.com
  license:
    name: MIT

servers:
  - url: https://api.ki.com/v1
    description: Production server
  - url: https://staging-api.ki.com/v1
    description: Staging server

security:
  - BearerAuth: []

paths:
  /chat/conversations:
    get:
      summary: List user conversations
      description: Retrieve paginated list of user's conversation history
      tags:
        - Conversations
      parameters:
        - name: limit
          in: query
          description: Number of conversations to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of conversations to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: order
          in: query
          description: Sort order for conversations
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

    post:
      summary: Create new conversation
      description: Start a new conversation session
      tags:
        - Conversations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /chat/conversations/{conversationId}:
    get:
      summary: Get conversation details
      description: Retrieve specific conversation with full message history
      tags:
        - Conversations
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      summary: Update conversation
      description: Update conversation metadata (title, status, etc.)
      tags:
        - Conversations
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConversationRequest'
      responses:
        '200':
          description: Conversation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Delete conversation
      description: Permanently delete conversation and all messages
      tags:
        - Conversations
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Conversation deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chat/conversations/{conversationId}/messages:
    get:
      summary: Get conversation messages
      description: Retrieve paginated messages from a conversation
      tags:
        - Messages
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: before
          in: query
          description: Get messages before this timestamp
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Send message
      description: Send a new message in the conversation
      tags:
        - Messages
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimited'

  /chat/conversations/{conversationId}/stream:
    get:
      summary: Stream conversation
      description: Server-sent events stream for real-time conversation updates
      tags:
        - Streaming
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event stream
          content:
            text/plain:
              schema:
                type: string
                example: |
                  event: message
                  data: {"id": "msg-123", "content": "Hello!", "role": "user"}
                  
                  event: ai_response_start
                  data: {"messageId": "msg-124"}
                  
                  event: ai_response_chunk
                  data: {"messageId": "msg-124", "chunk": "I understand"}
                  
                  event: ai_response_complete
                  data: {"messageId": "msg-124", "complete": true}

  /chat/emotions/analyze:
    post:
      summary: Analyze message emotions
      description: Analyze emotional content of text or audio
      tags:
        - Emotions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionAnalysisRequest'
      responses:
        '200':
          description: Emotion analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmotionAnalysisResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /chat/insights/patterns:
    get:
      summary: Get relationship patterns
      description: Retrieve identified relationship patterns for user
      tags:
        - Insights
      parameters:
        - name: timeframe
          in: query
          description: Time period for pattern analysis
          schema:
            type: string
            enum: [week, month, quarter, year]
            default: month
        - name: category
          in: query
          description: Filter patterns by category
          schema:
            type: string
            enum: [communication, time, intimacy, family, finances]
      responses:
        '200':
          description: Relationship patterns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternAnalysis'

  /chat/insights/summary:
    get:
      summary: Get conversation insights
      description: Retrieve AI-generated insights from conversation history
      tags:
        - Insights
      parameters:
        - name: conversationId
          in: query
          description: Specific conversation to analyze
          schema:
            type: string
            format: uuid
        - name: timeframe
          in: query
          description: Time period for insight generation
          schema:
            type: string
            enum: [day, week, month]
            default: week
      responses:
        '200':
          description: Conversation insights
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsightSummary'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 100
        status:
          type: string
          enum: [active, paused, completed, archived]
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        message_count:
          type: integer
          minimum: 0
        metadata:
          type: object
          properties:
            tags:
              type: array
              items:
                type: string
            emotional_tone:
              type: string
              enum: [positive, neutral, negative, mixed]

    ConversationDetail:
      allOf:
        - $ref: '#/components/schemas/Conversation'
        - type: object
          properties:
            messages:
              type: array
              items:
                $ref: '#/components/schemas/Message'
            insights:
              type: array
              items:
                $ref: '#/components/schemas/ConversationInsight'

    ConversationList:
      type: object
      properties:
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
          maxLength: 10000
        timestamp:
          type: string
          format: date-time
        emotions:
          $ref: '#/components/schemas/EmotionProfile'
        metadata:
          type: object
          properties:
            response_time:
              type: number
              description: AI response time in milliseconds
            confidence:
              type: number
              minimum: 0
              maximum: 1
            tokens_used:
              type: integer

    MessageResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Message'
        ai_response:
          $ref: '#/components/schemas/Message'
        insights:
          type: array
          items:
            $ref: '#/components/schemas/MessageInsight'

    Participant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        role:
          type: string
          enum: [primary, partner]
        status:
          type: string
          enum: [active, offline]

    EmotionProfile:
      type: object
      properties:
        primary_emotion:
          type: string
          enum: [joy, sadness, anger, fear, surprise, disgust, neutral]
        intensity:
          type: number
          minimum: 0
          maximum: 1
        confidence:
          type: number
          minimum: 0
          maximum: 1
        emotions:
          type: object
          additionalProperties:
            type: number
            minimum: 0
            maximum: 1

    PatternAnalysis:
      type: object
      properties:
        patterns:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipPattern'
        timeframe:
          type: string
        total_conversations:
          type: integer
        analysis_date:
          type: string
          format: date-time

    RelationshipPattern:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category:
          type: string
          enum: [communication, time, intimacy, family, finances, trust, conflict_resolution]
        frequency:
          type: integer
          minimum: 1
        intensity:
          type: number
          minimum: 0
          maximum: 1
        trend:
          type: string
          enum: [improving, stable, declining]
        first_occurrence:
          type: string
          format: date-time
        last_occurrence:
          type: string
          format: date-time
        triggers:
          type: array
          items:
            type: string
        suggestions:
          type: array
          items:
            type: string

    ConversationInsight:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [pattern, growth, concern, achievement]
        title:
          type: string
        description:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1
        generated_at:
          type: string
          format: date-time

    CreateConversationRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          maxLength: 100
        participants:
          type: array
          items:
            type: string
            format: uuid
        initial_message:
          type: string
          maxLength: 1000

    UpdateConversationRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
        status:
          type: string
          enum: [active, paused, completed, archived]
        metadata:
          type: object

    SendMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          maxLength: 10000
        role:
          type: string
          enum: [user, system]
          default: user
        emotions:
          $ref: '#/components/schemas/EmotionProfile'
        voice_data:
          type: string
          format: base64
          description: Base64 encoded audio data

    EmotionAnalysisRequest:
      type: object
      properties:
        text:
          type: string
          maxLength: 10000
        audio:
          type: string
          format: base64
          description: Base64 encoded audio data
        language:
          type: string
          default: en

    EmotionAnalysisResponse:
      type: object
      properties:
        emotions:
          $ref: '#/components/schemas/EmotionProfile'
        sentiment:
          type: object
          properties:
            polarity:
              type: number
              minimum: -1
              maximum: 1
            subjectivity:
              type: number
              minimum: 0
              maximum: 1

    InsightSummary:
      type: object
      properties:
        summary:
          type: string
        key_themes:
          type: array
          items:
            type: string
        emotional_journey:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              emotion:
                type: string
              intensity:
                type: number
        growth_indicators:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string

    MessageInsight:
      type: object
      properties:
        type:
          type: string
          enum: [pattern_detected, emotional_shift, growth_moment, concern_flag]
        description:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1

    MessageList:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: validation_error
            message: Invalid request parameters
            code: 400

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: unauthorized
            message: Invalid or expired authentication token
            code: 401

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: not_found
            message: Conversation not found
            code: 404

    RateLimited:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: rate_limited
            message: Too many requests, please try again later
            code: 429

tags:
  - name: Conversations
    description: Conversation management and history
  - name: Messages
    description: Message sending and retrieval
  - name: Streaming
    description: Real-time conversation streaming
  - name: Emotions
    description: Emotional analysis and processing
  - name: Insights
    description: Relationship insights and patterns